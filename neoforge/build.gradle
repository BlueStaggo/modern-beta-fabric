plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id 'com.modrinth.minotaur' version '2.+'
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        name "NeoForged"
        url "https://maven.neoforged.net/releases"
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    modApi "me.shedaniel.cloth:cloth-config-neoforge:${rootProject.cloth_config_version}"
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }

    from(project(":common").file("src/main/generated")) {
        include "**/**"
        exclude ".cache"
    }

    from(project(":common").file("src/main/resources")) {
        include "**/**"
        exclude "moderner_beta-common.mixins.json"
        exclude "assets/moderner_beta/icon.png"
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
    atAccessWideners.add "moderner_beta.accesswidener"
}

task renameJarForPublication(type: Zip, dependsOn: remapJar) {
    from remapJar.archiveFile.map { zipTree(it) }
    archiveExtension = "jar"
    metadataCharset "UTF-8"
    destinationDirectory = base.libsDirectory
    archiveClassifier = project.name
}

assemble.dependsOn renameJarForPublication

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from(commonSources.archiveFile.map { zipTree(it) }) {
        exclude "moderner_beta.accesswidener"
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = rootProject.modrinth_project_id
    versionName = "Moderner Beta " + project.version
    versionNumber = project.version
    gameVersions = [rootProject.minecraft_version]
    changelog = rootProject.file("CHANGELOG.md").text
    loaders = ["neoforge"]
    uploadFile = renameJarForPublication
    dependencies {
        required.project "cloth-config"
        required.project "architectury-api"
    }
}

publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}